% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/UniverseAlias.R
\name{UniverseAlias}
\alias{UniverseAlias}
\title{Alias Class}
\description{
A class for Alias objects.
}
\section{Super class}{
\code{gamstransfer::.BaseAlias} -> \code{UniverseAlias}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{domainForwarding}}{flag that forces set elements to be recursively 
included in all parent sets (i.e., implicit set growth)}

\item{\code{name}}{name of symbol}

\item{\code{refContainer}}{reference to the Container that the symbol belongs to}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{aliasWith}}{aliased object}

\item{\code{description}}{description of symbol}

\item{\code{dimension}}{of symbol}

\item{\code{domainForwarding}}{flag that forces set elements to be recursively 
included in all parent sets (i.e., implicit set growth)}

\item{\code{domainLabels}}{column headings for the records dataframe}

\item{\code{domainNames}}{string version of domain names}

\item{\code{domainType}}{none, relaxed or regular depending on state of domain links}

\item{\code{isSingleton}}{if symbol is a singleton set}

\item{\code{name}}{name of symbol}

\item{\code{numberRecords}}{number of symbol records}

\item{\code{records}}{the main symbol records}

\item{\code{refContainer}}{reference to the Container that the symbol belongs to}

\item{\code{summary}}{output a list of only the metadata}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-UniverseAlias-new}{\code{UniverseAlias$new()}}
\item \href{#method-UniverseAlias-format}{\code{UniverseAlias$format()}}
\item \href{#method-UniverseAlias-getUELs}{\code{UniverseAlias$getUELs()}}
\item \href{#method-UniverseAlias-getSparsity}{\code{UniverseAlias$getSparsity()}}
\item \href{#method-UniverseAlias-isValid}{\code{UniverseAlias$isValid()}}
\item \href{#method-UniverseAlias-equals}{\code{UniverseAlias$equals()}}
\item \href{#method-UniverseAlias-copy}{\code{UniverseAlias$copy()}}
\item \href{#method-UniverseAlias-clone}{\code{UniverseAlias$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UniverseAlias-new"></a>}}
\if{latex}{\out{\hypertarget{method-UniverseAlias-new}{}}}
\subsection{Method \code{new()}}{
There are two different ways to create a GAMS Alias and 
add it to a Container. One is using the Alias constructor and 
the other is using addAlias method which calls the Alias 
constructor internally.
addAlias is a Container method to add a Alias.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UniverseAlias$new(container = NULL, name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{container}}{A reference to the Container object that the symbol 
is being added to}

\item{\code{name}}{string argument for name of the Alias}

\item{\code{aliasFor}}{string argument for the set/alias we want to add
an alias for}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UniverseAlias-format"></a>}}
\if{latex}{\out{\hypertarget{method-UniverseAlias-format}{}}}
\subsection{Method \code{format()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UniverseAlias$format(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UniverseAlias-getUELs"></a>}}
\if{latex}{\out{\hypertarget{method-UniverseAlias-getUELs}{}}}
\subsection{Method \code{getUELs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UniverseAlias$getUELs(ignoreUnused = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UniverseAlias-getSparsity"></a>}}
\if{latex}{\out{\hypertarget{method-UniverseAlias-getSparsity}{}}}
\subsection{Method \code{getSparsity()}}{
getSparsity get the sparsity of the symbol 
w.r.t the cardinality
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UniverseAlias$getSparsity()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UniverseAlias-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-UniverseAlias-isValid}{}}}
\subsection{Method \code{isValid()}}{
TRUE if the symbol is in a valid format, 
throw exceptions if verbose=True, recheck a symbol if force=True
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UniverseAlias$isValid(verbose = FALSE, force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{type logical}

\item{\code{force}}{type logical}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UniverseAlias-equals"></a>}}
\if{latex}{\out{\hypertarget{method-UniverseAlias-equals}{}}}
\subsection{Method \code{equals()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UniverseAlias$equals(other, checkMetaData = TRUE, verbose = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UniverseAlias-copy"></a>}}
\if{latex}{\out{\hypertarget{method-UniverseAlias-copy}{}}}
\subsection{Method \code{copy()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UniverseAlias$copy(destination = NULL, overwrite = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UniverseAlias-clone"></a>}}
\if{latex}{\out{\hypertarget{method-UniverseAlias-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UniverseAlias$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
