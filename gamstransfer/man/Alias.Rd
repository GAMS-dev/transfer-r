% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Alias.R
\name{Alias}
\alias{Alias}
\title{Alias Class}
\description{
A class for Alias objects.
}
\section{Super class}{
\code{gamstransfer::.BaseAlias} -> \code{Alias}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{domainForwarding}}{flag that forces set elements to be recursively 
included in all parent sets (i.e., implicit set growth)}

\item{\code{name}}{name of symbol}

\item{\code{refContainer}}{reference to the Container that the symbol belongs to}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{aliasWith}}{aliased object}

\item{\code{description}}{description of symbol}

\item{\code{dimension}}{of symbol}

\item{\code{domainForwarding}}{flag that forces set elements to be recursively 
included in all parent sets (i.e., implicit set growth)}

\item{\code{domainLabels}}{column headings for the records dataframe}

\item{\code{domainNames}}{string version of domain names}

\item{\code{domainType}}{none, relaxed or regular depending on state of domain links}

\item{\code{isSingleton}}{if symbol is a singleton set}

\item{\code{name}}{name of symbol}

\item{\code{numberRecords}}{number of symbol records}

\item{\code{records}}{the main symbol records}

\item{\code{refContainer}}{reference to the Container that the symbol belongs to}

\item{\code{summary}}{output a list of only the metadata}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Alias-new}{\code{Alias$new()}}
\item \href{#method-Alias-format}{\code{Alias$format()}}
\item \href{#method-Alias-getUELs}{\code{Alias$getUELs()}}
\item \href{#method-Alias-setUELs}{\code{Alias$setUELs()}}
\item \href{#method-Alias-reorderUELs}{\code{Alias$reorderUELs()}}
\item \href{#method-Alias-addUELs}{\code{Alias$addUELs()}}
\item \href{#method-Alias-removeUELs}{\code{Alias$removeUELs()}}
\item \href{#method-Alias-renameUELs}{\code{Alias$renameUELs()}}
\item \href{#method-Alias-getSparsity}{\code{Alias$getSparsity()}}
\item \href{#method-Alias-isValid}{\code{Alias$isValid()}}
\item \href{#method-Alias-getDomainViolations}{\code{Alias$getDomainViolations()}}
\item \href{#method-Alias-findDomainViolations}{\code{Alias$findDomainViolations()}}
\item \href{#method-Alias-hasDomainViolations}{\code{Alias$hasDomainViolations()}}
\item \href{#method-Alias-countDomainViolations}{\code{Alias$countDomainViolations()}}
\item \href{#method-Alias-dropDomainViolations}{\code{Alias$dropDomainViolations()}}
\item \href{#method-Alias-countDuplicateRecords}{\code{Alias$countDuplicateRecords()}}
\item \href{#method-Alias-findDuplicateRecords}{\code{Alias$findDuplicateRecords()}}
\item \href{#method-Alias-hasDuplicateRecords}{\code{Alias$hasDuplicateRecords()}}
\item \href{#method-Alias-dropDuplicateRecords}{\code{Alias$dropDuplicateRecords()}}
\item \href{#method-Alias-setRecords}{\code{Alias$setRecords()}}
\item \href{#method-Alias-equals}{\code{Alias$equals()}}
\item \href{#method-Alias-generateRecords}{\code{Alias$generateRecords()}}
\item \href{#method-Alias-copy}{\code{Alias$copy()}}
\item \href{#method-Alias-clone}{\code{Alias$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-new"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-new}{}}}
\subsection{Method \code{new()}}{
There are two different ways to create a GAMS Alias and 
add it to a Container. One is using the Alias constructor and 
the other is using addAlias method which calls the Alias 
constructor internally.
addAlias is a Container method to add a Alias.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$new(container = NULL, name = NULL, aliasFor = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{container}}{A reference to the Container object that the symbol 
is being added to}

\item{\code{name}}{string argument for name of the Alias}

\item{\code{aliasFor}}{string argument for the set/alias we want to add
an alias for}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-format"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-format}{}}}
\subsection{Method \code{format()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$format(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-getUELs"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-getUELs}{}}}
\subsection{Method \code{getUELs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$getUELs(dimension = NULL, codes = NULL, ignoreUnused = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-setUELs"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-setUELs}{}}}
\subsection{Method \code{setUELs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$setUELs(uels, dimension = NULL, rename = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-reorderUELs"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-reorderUELs}{}}}
\subsection{Method \code{reorderUELs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$reorderUELs(uels = NULL, dimension = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-addUELs"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-addUELs}{}}}
\subsection{Method \code{addUELs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$addUELs(uels, dimension = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-removeUELs"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-removeUELs}{}}}
\subsection{Method \code{removeUELs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$removeUELs(uels = NULL, dimension = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-renameUELs"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-renameUELs}{}}}
\subsection{Method \code{renameUELs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$renameUELs(uels, dimension = NULL, allowMerge = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-getSparsity"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-getSparsity}{}}}
\subsection{Method \code{getSparsity()}}{
getSparsity get the sparsity of the symbol 
w.r.t the cardinality
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$getSparsity()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-isValid}{}}}
\subsection{Method \code{isValid()}}{
TRUE if the symbol is in a valid format, 
throw exceptions if verbose=True, recheck a symbol if force=True
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$isValid(verbose = FALSE, force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{type logical}

\item{\code{force}}{type logical
main convenience method to set standard dataframe formatted records}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-getDomainViolations"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-getDomainViolations}{}}}
\subsection{Method \code{getDomainViolations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$getDomainViolations()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-findDomainViolations"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-findDomainViolations}{}}}
\subsection{Method \code{findDomainViolations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$findDomainViolations()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-hasDomainViolations"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-hasDomainViolations}{}}}
\subsection{Method \code{hasDomainViolations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$hasDomainViolations()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-countDomainViolations"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-countDomainViolations}{}}}
\subsection{Method \code{countDomainViolations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$countDomainViolations()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-dropDomainViolations"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-dropDomainViolations}{}}}
\subsection{Method \code{dropDomainViolations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$dropDomainViolations()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-countDuplicateRecords"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-countDuplicateRecords}{}}}
\subsection{Method \code{countDuplicateRecords()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$countDuplicateRecords()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-findDuplicateRecords"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-findDuplicateRecords}{}}}
\subsection{Method \code{findDuplicateRecords()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$findDuplicateRecords(keep = "first")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-hasDuplicateRecords"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-hasDuplicateRecords}{}}}
\subsection{Method \code{hasDuplicateRecords()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$hasDuplicateRecords()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-dropDuplicateRecords"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-dropDuplicateRecords}{}}}
\subsection{Method \code{dropDuplicateRecords()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$dropDuplicateRecords(keep = "first")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-setRecords"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-setRecords}{}}}
\subsection{Method \code{setRecords()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$setRecords(records)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{records}}{specify set records as a string vector or a dataframe.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-equals"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-equals}{}}}
\subsection{Method \code{equals()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$equals(
  other,
  checkUELs = TRUE,
  checkElementText = TRUE,
  checkMetaData = TRUE,
  verbose = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-generateRecords"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-generateRecords}{}}}
\subsection{Method \code{generateRecords()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$generateRecords(density = 1)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-copy"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-copy}{}}}
\subsection{Method \code{copy()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$copy(destination = NULL, overwrite = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Alias-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Alias-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
