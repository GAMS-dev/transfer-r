% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gtr_R6.R
\name{Alias}
\alias{Alias}
\title{Alias Class}
\description{
A class for Alias objects.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{domainForwarding}}{flag that forces set elements to be recursively 
included in all parent sets (i.e., implicit set growth)}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{aliasWith}}{aliased object}

\item{\code{description}}{description of symbol}

\item{\code{dimension}}{of symbol}

\item{\code{domainForwarding}}{flag that forces set elements to be recursively 
included in all parent sets (i.e., implicit set growth)}

\item{\code{domainLabels}}{column headings for the records dataframe}

\item{\code{domainNames}}{string version of domain names}

\item{\code{domainType}}{none, relaxed or regular depending on state of domain links}

\item{\code{isSingleton}}{if symbol is a singleton set}

\item{\code{name}}{name of symbol}

\item{\code{numberRecords}}{number of symbol records}

\item{\code{records}}{the main symbol records}

\item{\code{refContainer}}{reference to the Container that the symbol belongs to}

\item{\code{summary}}{output a list of only the metadata}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Alias$new()}}
\item \href{#method-getCardinality}{\code{Alias$getCardinality()}}
\item \href{#method-getSparsity}{\code{Alias$getSparsity()}}
\item \href{#method-isValid}{\code{Alias$isValid()}}
\item \href{#method-setRecords}{\code{Alias$setRecords()}}
\item \href{#method-clone}{\code{Alias$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
There are two different ways to create a GAMS Alias and 
add it to a Container. One is using the Alias constructor and 
the other is using addAlias method which calls the Alias 
constructor internally.
addAlias is a Container method to add a Alias.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$new(container = NULL, name = NULL, aliasFor = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{container}}{A reference to the Container object that the symbol 
is being added to}

\item{\code{name}}{string argument for name of the Alias}

\item{\code{aliasFor}}{string argument for the set/alias we want to add
an alias for}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getCardinality"></a>}}
\if{latex}{\out{\hypertarget{method-getCardinality}{}}}
\subsection{Method \code{getCardinality()}}{
getCardinality get the full cartesian product of the domain
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$getCardinality()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSparsity"></a>}}
\if{latex}{\out{\hypertarget{method-getSparsity}{}}}
\subsection{Method \code{getSparsity()}}{
getSparsity get the sparsity of the symbol 
w.r.t the cardinality
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$getSparsity()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-isValid}{}}}
\subsection{Method \code{isValid()}}{
TRUE if the symbol is in a valid format, 
throw exceptions if verbose=True, recheck a symbol if force=True
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$isValid(verbose = FALSE, force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{type logical}

\item{\code{force}}{type logical
main convenience method to set standard dataframe formatted records}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setRecords"></a>}}
\if{latex}{\out{\hypertarget{method-setRecords}{}}}
\subsection{Method \code{setRecords()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$setRecords(records)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{records}}{specify set records as a string vector or a dataframe.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Alias$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
