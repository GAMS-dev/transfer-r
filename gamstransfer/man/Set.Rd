% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gtr_R6.R
\name{Set}
\alias{Set}
\title{Set Class}
\description{
A class for Set objects. This class inherits from an abstract Symbol class.
The documentation for methods common to all symbols can be accessed via help(Symbol)
 or help(BaseSymbol).
}
\section{Super classes}{
\code{\link[gamstransfer:BaseSymbol]{gamstransfer::BaseSymbol}} -> \code{\link[gamstransfer:Symbol]{gamstransfer::Symbol}} -> \code{Set}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{description}}{description of symbol}

\item{\code{dimension}}{of symbol}

\item{\code{domainForwarding}}{flag that forces set elements to be recursively 
included in all parent sets (i.e., implicit set growth)}

\item{\code{domainLabels}}{column headings for the records dataframe}

\item{\code{domainNames}}{string version of domain names}

\item{\code{domainType}}{none, relaxed or regular depending on state of 
domain links}

\item{\code{name}}{name of symbol}

\item{\code{numberRecords}}{number of symbol records}

\item{\code{records}}{the main symbol records}

\item{\code{refContainer}}{reference to the Container that the symbol belongs to}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{description}}{description of symbol}

\item{\code{dimension}}{of symbol}

\item{\code{domainForwarding}}{flag that forces set elements to be recursively 
included in all parent sets (i.e., implicit set growth)}

\item{\code{domainLabels}}{column headings for the records dataframe}

\item{\code{domainNames}}{string version of domain names}

\item{\code{domainType}}{none, relaxed or regular depending on state of 
domain links}

\item{\code{isSingleton}}{logical if symbol is a singleton set}

\item{\code{name}}{name of symbol}

\item{\code{numberRecords}}{number of symbol records}

\item{\code{records}}{the main symbol records}

\item{\code{refContainer}}{reference to the Container that the symbol belongs to}

\item{\code{summary}}{output a list of only the metadata}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Set$new()}}
\item \href{#method-setRecords}{\code{Set$setRecords()}}
\item \href{#method-clone}{\code{Set$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countEps">}\href{../../gamstransfer/html/BaseSymbol.html#method-countEps}{\code{gamstransfer::BaseSymbol$countEps()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countNA">}\href{../../gamstransfer/html/BaseSymbol.html#method-countNA}{\code{gamstransfer::BaseSymbol$countNA()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countNegInf">}\href{../../gamstransfer/html/BaseSymbol.html#method-countNegInf}{\code{gamstransfer::BaseSymbol$countNegInf()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countPosInf">}\href{../../gamstransfer/html/BaseSymbol.html#method-countPosInf}{\code{gamstransfer::BaseSymbol$countPosInf()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countUndef">}\href{../../gamstransfer/html/BaseSymbol.html#method-countUndef}{\code{gamstransfer::BaseSymbol$countUndef()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="getMaxAbsValue">}\href{../../gamstransfer/html/BaseSymbol.html#method-getMaxAbsValue}{\code{gamstransfer::BaseSymbol$getMaxAbsValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="getMaxValue">}\href{../../gamstransfer/html/BaseSymbol.html#method-getMaxValue}{\code{gamstransfer::BaseSymbol$getMaxValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="getMeanValue">}\href{../../gamstransfer/html/BaseSymbol.html#method-getMeanValue}{\code{gamstransfer::BaseSymbol$getMeanValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="getMinValue">}\href{../../gamstransfer/html/BaseSymbol.html#method-getMinValue}{\code{gamstransfer::BaseSymbol$getMinValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="whereMax">}\href{../../gamstransfer/html/BaseSymbol.html#method-whereMax}{\code{gamstransfer::BaseSymbol$whereMax()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="whereMaxAbs">}\href{../../gamstransfer/html/BaseSymbol.html#method-whereMaxAbs}{\code{gamstransfer::BaseSymbol$whereMaxAbs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="whereMin">}\href{../../gamstransfer/html/BaseSymbol.html#method-whereMin}{\code{gamstransfer::BaseSymbol$whereMin()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="Symbol" data-id=".linkDomainCategories">}\href{../../gamstransfer/html/Symbol.html#method-.linkDomainCategories}{\code{gamstransfer::Symbol$.linkDomainCategories()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="Symbol" data-id="findDomainViolations">}\href{../../gamstransfer/html/Symbol.html#method-findDomainViolations}{\code{gamstransfer::Symbol$findDomainViolations()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="Symbol" data-id="getCardinality">}\href{../../gamstransfer/html/Symbol.html#method-getCardinality}{\code{gamstransfer::Symbol$getCardinality()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="Symbol" data-id="getSparsity">}\href{../../gamstransfer/html/Symbol.html#method-getSparsity}{\code{gamstransfer::Symbol$getSparsity()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="Symbol" data-id="isValid">}\href{../../gamstransfer/html/Symbol.html#method-isValid}{\code{gamstransfer::Symbol$isValid()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="Symbol" data-id="shape">}\href{../../gamstransfer/html/Symbol.html#method-shape}{\code{gamstransfer::Symbol$shape()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="Symbol" data-id="toDense">}\href{../../gamstransfer/html/Symbol.html#method-toDense}{\code{gamstransfer::Symbol$toDense()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
There are two different ways to create a GAMS set and 
add it to a Container. One is using the Set constructor and 
the other is using addSet method which calls the Set constructor
internally.
addSet is a Container method to add a Set.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$new(
  container = NULL,
  name = NULL,
  domain = "*",
  isSingleton = FALSE,
  records = NULL,
  domainForwarding = FALSE,
  description = ""
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{container}}{A reference to the Container object that the symbol 
is being added to}

\item{\code{name}}{string argument for name of the set}

\item{\code{domain}}{an optional argument specifying a list of strings, 
a string. default value is "*".}

\item{\code{isSingleton}}{an optional logical argument specifying if a set
is singleton. Default value is FALSE.}

\item{\code{records}}{specify set records as a string vector or a dataframe.}

\item{\code{domainForwarding}}{an optional logical argument to specify 
domain forwarding. Default value is FALSE.}

\item{\code{description}}{string specifying description for the set}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a Set object
main convenience method to set standard dataframe formatted records
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setRecords"></a>}}
\if{latex}{\out{\hypertarget{method-setRecords}{}}}
\subsection{Method \code{setRecords()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$setRecords(records)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{records}}{specify set records as a string vector or a dataframe.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Set$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
