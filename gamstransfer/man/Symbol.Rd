% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gtr_R6.R
\name{Symbol}
\alias{Symbol}
\title{Symbol Abstract Class}
\description{
An abstract symbol class from 
which the classes Set, Parameter, Variable, 
and Equation are inherited.
}
\section{Super class}{
\code{\link[gamstransfer:BaseSymbol]{gamstransfer::BaseSymbol}} -> \code{Symbol}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{refContainer}}{reference to the Container that the symbol 
belongs to. Type Container.}

\item{\code{name}}{name of the symbol}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Symbol$new()}}
\item \href{#method-findDomainViolations}{\code{Symbol$findDomainViolations()}}
\item \href{#method-getCardinality}{\code{Symbol$getCardinality()}}
\item \href{#method-getSparsity}{\code{Symbol$getSparsity()}}
\item \href{#method-isValid}{\code{Symbol$isValid()}}
\item \href{#method-shape}{\code{Symbol$shape()}}
\item \href{#method-toDense}{\code{Symbol$toDense()}}
\item \href{#method-.linkDomainCategories}{\code{Symbol$.linkDomainCategories()}}
\item \href{#method-clone}{\code{Symbol$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countEps">}\href{../../gamstransfer/html/BaseSymbol.html#method-countEps}{\code{gamstransfer::BaseSymbol$countEps()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countNA">}\href{../../gamstransfer/html/BaseSymbol.html#method-countNA}{\code{gamstransfer::BaseSymbol$countNA()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countNegInf">}\href{../../gamstransfer/html/BaseSymbol.html#method-countNegInf}{\code{gamstransfer::BaseSymbol$countNegInf()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countPosInf">}\href{../../gamstransfer/html/BaseSymbol.html#method-countPosInf}{\code{gamstransfer::BaseSymbol$countPosInf()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="countUndef">}\href{../../gamstransfer/html/BaseSymbol.html#method-countUndef}{\code{gamstransfer::BaseSymbol$countUndef()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="getMaxAbsValue">}\href{../../gamstransfer/html/BaseSymbol.html#method-getMaxAbsValue}{\code{gamstransfer::BaseSymbol$getMaxAbsValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="getMaxValue">}\href{../../gamstransfer/html/BaseSymbol.html#method-getMaxValue}{\code{gamstransfer::BaseSymbol$getMaxValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="getMeanValue">}\href{../../gamstransfer/html/BaseSymbol.html#method-getMeanValue}{\code{gamstransfer::BaseSymbol$getMeanValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="getMinValue">}\href{../../gamstransfer/html/BaseSymbol.html#method-getMinValue}{\code{gamstransfer::BaseSymbol$getMinValue()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="whereMax">}\href{../../gamstransfer/html/BaseSymbol.html#method-whereMax}{\code{gamstransfer::BaseSymbol$whereMax()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="whereMaxAbs">}\href{../../gamstransfer/html/BaseSymbol.html#method-whereMaxAbs}{\code{gamstransfer::BaseSymbol$whereMaxAbs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="gamstransfer" data-topic="BaseSymbol" data-id="whereMin">}\href{../../gamstransfer/html/BaseSymbol.html#method-whereMin}{\code{gamstransfer::BaseSymbol$whereMin()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Symbol$new(
  container,
  name,
  type,
  subtype,
  domain,
  description,
  domainForwarding
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-findDomainViolations"></a>}}
\if{latex}{\out{\hypertarget{method-findDomainViolations}{}}}
\subsection{Method \code{findDomainViolations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Symbol$findDomainViolations()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getCardinality"></a>}}
\if{latex}{\out{\hypertarget{method-getCardinality}{}}}
\subsection{Method \code{getCardinality()}}{
getCardinality get the full cartesian product of the domain
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Symbol$getCardinality()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSparsity"></a>}}
\if{latex}{\out{\hypertarget{method-getSparsity}{}}}
\subsection{Method \code{getSparsity()}}{
getSparsity get the sparsity of the symbol w.r.t the cardinality
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Symbol$getSparsity()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-isValid}{}}}
\subsection{Method \code{isValid()}}{
TRUE if the symbol is in a valid format, 
throw exceptions if verbose=True, recheck a symbol if force=True
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Symbol$isValid(verbose = FALSE, force = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{type logical}

\item{\code{force}}{type logical}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-shape"></a>}}
\if{latex}{\out{\hypertarget{method-shape}{}}}
\subsection{Method \code{shape()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Symbol$shape()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-toDense"></a>}}
\if{latex}{\out{\hypertarget{method-toDense}{}}}
\subsection{Method \code{toDense()}}{
toDense convert symbol to a dense matrix/array format
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Symbol$toDense(column = "level")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{column}}{column to be converted to dense format.
This is an optional argument which defaults to `value` for parameter
 and `level` for variable and equation. For variables and equations, 
alternate column/columns can be provided using the columns argument.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.linkDomainCategories"></a>}}
\if{latex}{\out{\hypertarget{method-.linkDomainCategories}{}}}
\subsection{Method \code{.linkDomainCategories()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Symbol$.linkDomainCategories()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Symbol$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
